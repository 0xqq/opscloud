<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sdg.cmdb.dao.cmdb.NginxDao">

    <select id="getVhostSize" parameterType="object" resultType="_long">
        SELECT count(*) from oc_nginx_vhosts
        <where>
            <if test="serverName != null and serverName != ''">
                serverName like "%" #{serverName} "%"
            </if>
        </where>
    </select>

    <select id="getVhostPage" parameterType="object" resultType="VhostDO">
        SELECT * FROM oc_nginx_vhosts
        <where>
            <if test="serverName != null and serverName != ''">
                serverName like "%" #{serverName} "%"
            </if>
        </where>
        ORDER BY serverName DESC
        limit #{pageStart}, #{length}
    </select>

    <select id="getVhost" parameterType="_long" resultType="VhostDO">
        SELECT * FROM oc_nginx_vhosts WHERE id = #{id}
    </select>


    <delete id="delVhost" parameterType="_long">
        DELETE FROM oc_nginx_vhosts WHERE id = #{id}
    </delete>

    <insert id="addVhost" parameterType="VhostDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_nginx_vhosts (
        serverName,
        serverKey,
        content
        ) VALUES (
        #{serverName},
        #{serverKey},
        #{content}
        );
    </insert>

    <update id="updateVhost" parameterType="VhostDO">
        UPDATE oc_nginx_vhosts
        SET
        serverName = #{serverName},
        serverKey = #{serverKey},
        content = #{content}
        WHERE id = #{id}
    </update>

    <select id="queryVhostEnvByVhostId" parameterType="_long" resultType="VhostEnvDO">
        SELECT * FROM oc_nginx_vhost_env WHERE vhostId = #{vhostId}
    </select>

    <select id="getVhostEnv" parameterType="_long" resultType="VhostEnvDO">
        SELECT * FROM oc_nginx_vhost_env WHERE id = #{id}
    </select>

    <insert id="addVhostEnv" parameterType="VhostEnvDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_nginx_vhost_env (
        vhostId,
        envType,
        confPath,
        autoBuild,
        content
        ) VALUES (
        #{vhostId},
        #{envType},
        #{confPath},
        #{autoBuild},
        #{content}
        );
    </insert>

    <update id="updateVhostEnv" parameterType="VhostEnvDO">
        UPDATE oc_nginx_vhost_env
        SET
        confPath = #{confPath},
        autoBuild = #{autoBuild},
        content = #{content}
        WHERE id = #{id}
    </update>

    <delete id="delVhostEnv" parameterType="_long">
        DELETE FROM oc_nginx_vhost_env WHERE id = #{id}
    </delete>


    <select id="queryEnvFileByEnvId" parameterType="_long" resultType="EnvFileDO">
        SELECT * FROM oc_nginx_env_file WHERE envId = #{envId}
    </select>

    <select id="getEnvFile" parameterType="_long" resultType="EnvFileDO">
        SELECT * FROM oc_nginx_env_file WHERE id = #{id}
    </select>

    <insert id="addEnvFile" parameterType="EnvFileDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_nginx_env_file (
        envId,
        fileType,
        filePath,
        fileName,
        fileKey
        ) VALUES (
        #{envId},
        #{fileType},
        #{filePath},
        #{fileName},
        #{fileKey}
        );
    </insert>

    <delete id="delEnvFile" parameterType="_long">
        DELETE FROM oc_nginx_env_file WHERE id = #{id}
    </delete>

    <update id="updateEnvFile" parameterType="EnvFileDO">
        UPDATE oc_nginx_env_file
        SET
        filePath = #{filePath},
        fileName = #{fileName}
        WHERE id = #{id}
    </update>

    <insert id="addVhostServerGroup" parameterType="VhostServerGroupDO" useGeneratedKeys="true" keyColumn="id"
            keyProperty="id">
        INSERT INTO oc_nginx_vhost_servergroup (
        vhostId,
        serverGroupId,
        groupName
        ) VALUES (
        #{vhostId},
        #{serverGroupId},
        #{groupName}
        );
    </insert>

    <delete id="delVhostServerGroup" parameterType="_long">
        DELETE FROM oc_nginx_vhost_servergroup WHERE id = #{id}
    </delete>

    <select id="queryVhostServerGroupByVhostId" parameterType="object" resultType="VhostServerGroupDO">
        SELECT * FROM oc_nginx_vhost_servergroup
        WHERE vhostId = #{vhostId}
        ORDER BY groupName DESC
    </select>


    <insert id="addPlaybook" parameterType="NginxPlaybookDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_nginx_playbook (
        vhostId,
        serverKey,
        serverGroupId,
        serverGroupName,
        hostPattern,
        src,
        dest,
        username,
        usergroup,
        playbookId
        ) VALUES (
        #{vhostId},
        #{serverKey},
        #{serverGroupId},
        #{serverGroupName},
        #{hostPattern},
        #{src},
        #{dest},
        #{username},
        #{usergroup},
        #{playbookId}
        );
    </insert>

    <update id="updatePlaybook" parameterType="NginxPlaybookDO">
        UPDATE oc_nginx_playbook
        SET
        serverGroupId = #{serverGroupId},
        serverGroupName = #{serverGroupName},
        hostPattern = #{hostPattern},
        src = #{src},
        dest = #{dest},
        username = #{username},
        usergroup = #{usergroup},
        playbookId = #{playbookId}
        WHERE id = #{id}
    </update>

    <delete id="delPlaybook" parameterType="_long">
        DELETE FROM oc_nginx_playbook WHERE id = #{id}
    </delete>

    <select id="queryPlaybookPage" parameterType="object" resultType="NginxPlaybookDO">
        SELECT * FROM oc_nginx_playbook LIMIT 20
    </select>

    <select id="getPlaybook" parameterType="object" resultType="NginxPlaybookDO">
        SELECT * FROM oc_nginx_playbook WHERE id = #{id}
    </select>

    <insert id="addNginxTcp" parameterType="NginxTcpDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_nginx_tcp (
        serviceName,
        content,
        serverGroupId,
        serverGroupName,
        envType,
        serverPort,
        portName,
        nginxPort,
        gmtExpired,
        userId,
        displayName,
        finished
        ) VALUES (
        #{serviceName},
        #{content},
        #{serverGroupId},
        #{serverGroupName},
        #{envType},
        #{serverPort},
        #{portName},
        #{nginxPort},
        #{gmtExpired},
        #{userId},
        #{displayName},
        #{finished}
        );
    </insert>

    <select id="checkNginxTcp" parameterType="NginxTcpDO" resultType="NginxTcpDO">
        SELECT * FROM oc_nginx_tcp
        WHERE serviceName = #{serviceName} AND envType = #{envType} AND portName = #{portName}
              AND finished = false
    </select>

    <select id="getNginxTcp" parameterType="_long" resultType="NginxTcpDO">
        SELECT * FROM oc_nginx_tcp
        WHERE id = #{id}
    </select>

    <update id="updateNginxTcpFinished" parameterType="NginxTcpDO">
        UPDATE oc_nginx_tcp
        SET finished = true
        WHERE id = #{id}
    </update>

    <select id="queryNginxTcpAll" parameterType="_int" resultType="NginxTcpDO">
        SELECT * FROM oc_nginx_tcp
        WHERE finished = false AND envType = #{envType}
    </select>


    <select id="getNginxTcpSize" parameterType="object" resultType="_int">
        SELECT COUNT(*) FROM oc_nginx_tcp
        <where>
            finished = 0
            <if test="!isAdmin">
                AND serverGroupId IN ( SELECT serverGroupId FROM keybox_user_server WHERE username = #{username} )
            </if>
            <if test="envType != -1">
                AND envType = #{envType}
            </if>
            <if test="serviceName != null and serviceName != ''">
                AND serviceName LIKE "%"#{serviceName}"%"
            </if>
        </where>
    </select>

    <select id="getNginxTcpPage" parameterType="object" resultType="NginxTcpDO">
        SELECT * FROM oc_nginx_tcp
        <where>
            finished = 0
            <if test="!isAdmin">
                AND serverGroupId IN ( SELECT serverGroupId FROM keybox_user_server WHERE username = #{username} )
            </if>
            <if test="envType != -1">
                AND envType = #{envType}
            </if>
            <if test="serviceName != null and serviceName != ''">
                AND serviceName LIKE "%"#{serviceName}"%"
            </if>
        </where>
        ORDER BY serviceName DESC
        limit #{pageStart}, #{length}
    </select>


    <select id="getNginxTcpDubboByKey" parameterType="object" resultType="NginxTcpDubboDO">
        SELECT * FROM oc_nginx_tcp_dubbo
        WHERE clusterKey = #{clusterKey} AND dubbo = #{dubbo}
    </select>

    <insert id="addNginxTcpDubbo" parameterType="NginxTcpDubboDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_nginx_tcp_dubbo (
        clusterKey,
        dubbo,
        kubernetesServiceId,
        podIp,
        servicePort
        ) VALUES (
        #{clusterKey},
        #{dubbo},
        #{kubernetesServiceId},
        #{podIp},
        #{servicePort}
        );
    </insert>

    <select id="queryNginxTcpDubbo" parameterType="string" resultType="NginxTcpDubboDO">
        SELECT * FROM oc_nginx_tcp_dubbo
        WHERE clusterKey = #{clusterKey}
    </select>

    <delete id="delNginxTcpDubbo" parameterType="_long">
        DELETE FROM oc_nginx_tcp_dubbo WHERE id = #{id}
    </delete>

</mapper>