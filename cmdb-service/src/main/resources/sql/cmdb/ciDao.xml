<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sdg.cmdb.dao.cmdb.CiDao">


    <!--统计部署次数-->
    <!--<select id="getCiDeployedCnt" resultType="_int">-->
    <!--SELECT COUNT(*) AS cnt FROM ci_deploy_statistics;-->
    <!--</select>-->

    <!--统计项目总数-->
    <!--<select id="getCiProjectCnt" resultType="_int">-->
    <!--SELECT COUNT( DISTINCT projectName ) AS cnt-->
    <!--FROM ci_deploy_statistics;-->
    <!--</select>-->

    <!--<select id="statusCiDeployProject" resultType="CiProjectVO">-->
    <!--SELECT projectName, COUNT(*) AS cnt-->
    <!--FROM ci_deploy_statistics-->
    <!--WHERE env = "back" OR env = "production"-->
    <!--GROUP BY projectName-->
    <!--ORDER BY cnt DESC-->
    <!--limit 20;-->
    <!--</select>-->

    <!--<select id="statusCiDeployUser" resultType="CiDeployUserVO">-->
    <!--SELECT bambooManualBuildTriggerReasonUserName AS username, COUNT(*) AS cnt-->
    <!--FROM ci_deploy_statistics-->
    <!--GROUP BY username-->
    <!--ORDER BY cnt DESC-->
    <!--limit 20;-->
    <!--</select>-->

    <!--<select id="statusCiRepo" resultType="CiRepoVO">-->
    <!--SELECT bambooDeployProject AS repo, COUNT(*) AS cnt-->
    <!--FROM ci_deploy_statistics-->
    <!--GROUP BY repo-->
    <!--ORDER BY cnt DESC-->
    <!--limit 20;-->
    <!--</select>-->

    <!--<select id="statusCiDeploy" resultType="CiDeployVO">-->
    <!--SELECT projectName ,-->
    <!--groupName,-->
    <!--bambooDeployVersion AS version,-->
    <!--bambooManualBuildTriggerReasonUserName AS username,-->
    <!--gmtCreate,-->
    <!--gmtModify-->
    <!--FROM ci_deploy_statistics-->
    <!--ORDER BY gmtCreate DESC-->
    <!--limit 14-->
    <!--</select>-->


    <!--新版本-->

    <!--取当前用户授权的ciApp-->
    <select id="getCiAppByAuthUserId" parameterType="object" resultType="CiAppDO">
        SELECT * FROM oc_ci_app
        <where>
            <if test="userId != 0">
                id IN ( SELECT appId FROM oc_ci_app_auth WHERE userId = #{userId} )
            </if>
            <if test="labelId > 1">
                AND id IN ( SELECT appId FROM oc_ci_label_member WHERE labelId = #{labelId} )
            </if>
            <if test="queryName != null and queryName != ''">
                AND ( appName like "%" #{queryName} "%" OR projectName like "%" #{queryName} "%" )
            </if>
            <if test="appType != -1">
                AND appType = #{appType}
            </if>
        </where>
        ORDER BY projectName
    </select>


    <select id="getCiAppUnauthUserId" parameterType="object" resultType="CiAppDO">
        SELECT * FROM oc_ci_app
        <where>
            id NOT IN ( SELECT appId FROM oc_ci_app_auth WHERE userId = #{userId} )
            <if test="queryName != null and queryName != ''">
                AND ( appName like "%" #{queryName} "%" OR projectName like "%" #{queryName} "%" )
            </if>
            <if test="appType != -1">
                AND appType = #{appType}
            </if>
        </where>
        ORDER BY projectName
    </select>

    <select id="checkCiAppAuth" parameterType="object" resultType="_int">
        SELECT count(*) FROM oc_ci_app_auth WHERE userId = #{userId} AND appId = #{appId}
    </select>

    <select id="queryCiAppAuthByAppId" parameterType="_long" resultType="CiAppAuthDO">
        SELECT * FROM oc_ci_app_auth
        WHERE appId = #{appId}
    </select>

    <insert id="addCiAppAuth" parameterType="CiAppAuthDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_ci_app_auth(
        userId,
        username,
        appId,
        appName
        ) VALUES (
        #{userId},
        #{username},
        #{appId},
        #{appName}
        )
    </insert>

    <select id="getCiAppAuthByAppIdAndUserId" parameterType="object" resultType="CiAppAuthDO">
        SELECT * FROM oc_ci_app_auth
        WHERE userId = #{userId} AND appId = #{appId}
    </select>

    <delete id="delCiAppAuth" parameterType="_long">
        DELETE FROM oc_ci_app_auth WHERE id = #{id}
    </delete>

    <insert id="addCiApp" parameterType="CiAppDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_ci_app(
        appName,
        projectName,
        serverGroupId,
        serverGroupName,
        sshUrl,
        webUrl,
        projectId,
        appType,
        ciType,
        userId,
        authBranch,
        gitFlow,
        content
        ) VALUES (
        #{appName},
        #{projectName},
        #{serverGroupId},
        #{serverGroupName},
        #{sshUrl},
        #{webUrl},
        #{projectId},
        #{appType},
        #{ciType},
        #{userId},
        #{authBranch},
        #{gitFlow},
        #{content}
        )
    </insert>

    <update id="updateCiApp" parameterType="CiAppDO">
        UPDATE oc_ci_app
        SET
        appName = #{appName},
        projectName = #{projectName},
        serverGroupId = #{serverGroupId},
        serverGroupName = #{serverGroupName},
        appType = #{appType},
        ciType = #{ciType},
        authBranch = #{authBranch},
        dingtalkId = #{dingtalkId},
        gitFlow = #{gitFlow},
        content = #{content}
        WHERE id = #{id}
    </update>

    <select id="getCiApp" parameterType="_long" resultType="CiAppDO">
        SELECT * FROM oc_ci_app WHERE id = #{id}
    </select>

    <select id="getCiAppByName" parameterType="string" resultType="CiAppDO">
        SELECT * FROM oc_ci_app WHERE appName = #{appName}
    </select>

    <delete id="delCiApp" parameterType="_long">
        DELETE FROM oc_ci_app WHERE id = #{id}
    </delete>

    <insert id="addCiJob" parameterType="CiJobDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_ci_job(
        name,
        appId,
        branch,
        atAll,
        hostPattern,
        envType,
        ciType,
        jobName,
        jobTemplate,
        jobVersion,
        deployJobName,
        deployJobTemplate,
        deployJobVersion,
        paramsYaml,
        content
        ) VALUES (
        #{name},
        #{appId},
        #{branch},
        #{atAll},
        #{hostPattern},
        #{envType},
        #{ciType},
        #{jobName},
        #{jobTemplate},
        #{jobVersion},
        #{deployJobName},
        #{deployJobTemplate},
        #{deployJobVersion},
        #{paramsYaml},
        #{content}
        )
    </insert>

    <update id="updateCiJob" parameterType="CiJobDO">
        UPDATE oc_ci_job
        SET
        name = #{name},
        content = #{content},
        ciType = #{ciType},
        branch = #{branch},
        atAll = #{atAll},
        hostPattern = #{hostPattern},
        envType = #{envType},
        jobTemplate = #{jobTemplate},
        jobVersion = #{jobVersion},
        deployJobName = #{deployJobName},
        deployJobTemplate = #{deployJobTemplate},
        deployJobVersion = #{deployJobVersion},
        paramsYaml = #{paramsYaml},
        content = #{content}
        WHERE id = #{id}
    </update>

    <update id="updateCiJobParamsYaml" parameterType="CiJobDO">
        UPDATE oc_ci_job
        SET paramsYaml = #{paramsYaml}
        WHERE id = #{id}
    </update>

    <select id="getCiJobByAppId" parameterType="_long" resultType="CiJobDO">
        SELECT * FROM oc_ci_job WHERE appId = #{appId}
    </select>

    <select id="queryCiJobByAutoBuild" parameterType="object" resultType="CiJobDO">
        SELECT * FROM oc_ci_job
        WHERE
          id IN ( SELECT id FROM oc_ci_app WHERE projectName = #{projectName} )
          AND branch = #{branch}
          AND autoBuild = 1
    </select>

    <select id="getCiJobByJobName" parameterType="object" resultType="CiJobDO">
        SELECT * FROM oc_ci_job WHERE jobName = #{jobName}
    </select>

    <select id="queryCiJobByJobTemplate" parameterType="object" resultType="CiJobDO">
        SELECT * FROM oc_ci_job
        WHERE jobTemplate = #{jobTemplate}
    </select>

    <select id="queryCiJobByDeployJobTemplate" parameterType="object" resultType="CiJobDO">
        SELECT * FROM oc_ci_job
        WHERE deployJobTemplate = #{deployJobTemplate}
    </select>

    <select id="getCiJob" parameterType="_long" resultType="CiJobDO">
        SELECT * FROM oc_ci_job WHERE id = #{id}
    </select>

    <delete id="delCiJob" parameterType="_long">
        DELETE FROM oc_ci_job WHERE id = #{id}
    </delete>

    <select id="queryJobParamByJobId" parameterType="_long" resultType="CiJobParamDO">
        SELECT * FROM oc_ci_job_parameter WHERE jobId = #{jobId}
    </select>

    <select id="getJobParam" parameterType="_long" resultType="CiJobParamDO">
        SELECT * FROM oc_ci_job_parameter WHERE id = #{id}
    </select>

    <insert id="addJobParam" parameterType="CiJobParamDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_ci_job_parameter (
        jobId,
        paramName,
        paramValue,
        content
        ) VALUES (
        #{jobId},
        #{paramName},
        #{paramValue},
        #{content}
        );
    </insert>

    <update id="updateJobParam" parameterType="CiJobParamDO">
        UPDATE oc_ci_job_parameter
        SET paramName = #{paramName},
        paramValue = #{paramValue},
        content = #{content}
        WHERE id = #{id}
    </update>

    <delete id="delJobParam" parameterType="_long">
        DELETE FROM oc_ci_job_parameter WHERE id = #{id}
    </delete>

    <insert id="addTemplate" parameterType="CiTemplateDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_ci_job_template (
        name,
        version,
        appType,
        ciType,
        rollbackType,
        envType,
        md5,
        content
        ) VALUES (
        #{name},
        #{version},
        #{appType},
        #{ciType},
        #{rollbackType},
        #{envType},
        #{md5},
        #{content}
        );
    </insert>

    <update id="updateTemplate" parameterType="CiTemplateDO">
        UPDATE oc_ci_job_template
        SET name = #{name},
        appType = #{appType},
        version = #{version},
        ciType = #{ciType},
        rollbackType = #{rollbackType},
        envType = #{envType},
        md5 = #{md5},
        content = #{content}
        WHERE id = #{id}
    </update>

    <delete id="delTemplate" parameterType="_long">
        DELETE FROM oc_ci_job_template WHERE id = #{id}
    </delete>

    <select id="getTemplateSize" parameterType="object" resultType="_long">
        SELECT count(*) from oc_ci_job_template
        <where>
            <if test="name != null and name != ''">
                name like "%" #{name} "%"
            </if>
            <if test="appType != -1">
                AND appType = #{appType}
            </if>
            <if test="ciType != -1">
                AND ciType = #{ciType}
            </if>
        </where>
    </select>

    <select id="getTemplatePage" parameterType="object" resultType="CiTemplateDO">
        SELECT * FROM oc_ci_job_template
        <where>
            <if test="name != null and name != ''">
                name like "%" #{name} "%"
            </if>
            <if test="appType != -1">
                AND appType = #{appType}
            </if>
            <if test="ciType != -1">
                AND ciType = #{ciType}
            </if>
        </where>
        ORDER BY name DESC
        limit #{pageStart}, #{pageLength}
    </select>

    <select id="queryTemplates" resultType="CiTemplateDO">
        SELECT * FROM oc_ci_job_template
    </select>

    <select id="getTemplate" parameterType="object" resultType="CiTemplateDO">
        SELECT * FROM oc_ci_job_template WHERE id = #{id}
    </select>

    <select id="getTemplateByName" parameterType="object" resultType="CiTemplateDO">
        SELECT * FROM oc_ci_job_template WHERE name = #{name}
    </select>

    <insert id="addBuild" parameterType="CiBuildDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_ci_build (
        jobId,
        jobName,
        parameters,
        displayName,
        mail,
        mobile,
        buildNumber,
        versionName,
        versionDesc,
        commit
        ) VALUES (
        #{jobId},
        #{jobName},
        #{parameters},
        #{displayName},
        #{mail},
        #{mobile},
        #{buildNumber},
        #{versionName},
        #{versionDesc},
        #{commit}
        );
    </insert>

    <update id="updateBuild" parameterType="CiBuildDO">
        UPDATE oc_ci_build
        SET buildNumber = #{buildNumber},
        buildPhase = #{buildPhase},
        buildStatus = #{buildStatus},
        versionName = #{versionName}
        WHERE id = #{id}
    </update>

    <select id="getBuild" parameterType="_long" resultType="CiBuildDO">
        SELECT * FROM oc_ci_build WHERE id = #{id}
    </select>

    <!--查询队列-->
    <select id="getBuildByQueue" parameterType="object" resultType="CiBuildDO">
        SELECT * FROM oc_ci_build
        WHERE jobName = #{jobName} AND buildNumber = -1
        ORDER BY gmtCreate
        limit 1
    </select>

    <select id="getBuildByUnique" parameterType="object" resultType="CiBuildDO">
        SELECT * FROM oc_ci_build
        WHERE jobName = #{jobName} AND buildNumber = #{buildNumber}
        ORDER BY gmtCreate
        limit 1
    </select>

    <delete id="delBuild" parameterType="_long">
        DELETE FROM oc_ci_build WHERE id = #{id}
    </delete>

    <select id="getBuildSize" parameterType="object" resultType="_long">
        SELECT count(*) from oc_ci_build
        WHERE jobId = #{jobId} AND jobName = #{jobName}
    </select>

    <select id="getBuildPage" parameterType="object" resultType="CiBuildDO">
        SELECT * FROM oc_ci_build
        WHERE jobId = #{jobId} AND jobName = #{jobName}
        ORDER BY gmtCreate DESC
        limit #{pageStart}, #{pageLength}
    </select>

    <select id="getBuildByJobId" parameterType="_long" resultType="CiBuildDO">
        SELECT * FROM oc_ci_build WHERE jobId = #{jobId}
    </select>

    <insert id="addBuildNotify" parameterType="BuildNotifyDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_ci_build_notify (
        buildId,
        jobName,
        jobUrl,
        buildFullUrl,
        buildNumber,
        buildPhase,
        buildStatus,
        buildUrl,
        scmUrl,
        scmBranch,
        scmCommit,
        dingtalk
        ) VALUES (
        #{buildId},
        #{jobName},
        #{jobUrl},
        #{buildFullUrl},
        #{buildNumber},
        #{buildPhase},
        #{buildStatus},
        #{buildUrl},
        #{scmUrl},
        #{scmBranch},
        #{scmCommit},
        #{dingtalk}
        );
    </insert>

    <update id="updateBuildNotify" parameterType="BuildNotifyDO">
        UPDATE oc_ci_build_notify
        SET dingtalk = #{dingtalk},
        buildPhase = #{buildPhase},
        buildStatus = #{buildStatus}
        WHERE id = #{id}
    </update>

    <delete id="delBuildNotify" parameterType="_long">
        DELETE FROM oc_ci_build_notify WHERE id = #{id}
    </delete>

    <select id="queryBuildNotifyByBuildId" parameterType="object" resultType="BuildNotifyDO">
        SELECT * FROM oc_ci_build_notify
        WHERE buildId = #{buildId}
    </select>

    <select id="queryNotifyStartedByJobName" parameterType="object" resultType="string">
        SELECT scmCommit FROM oc_ci_build_notify
        WHERE  jobName = #{jobName} AND buildPhase = 'STARTED'
        ORDER BY gmtCreate DESC
        limit 1
    </select>

    <select id="queryNotifyFinalizedByJobName" parameterType="object" resultType="string">
        SELECT scmCommit FROM oc_ci_build_notify
        WHERE jobName = #{jobName} AND buildPhase = 'FINALIZED' AND buildStatus = 'SUCCESS'
        ORDER BY gmtCreate DESC
        limit 1
    </select>

    <select id="getLastBuildByJobId" parameterType="_long" resultType="CiBuildDO">
        SELECT * FROM oc_ci_build
        WHERE  jobId = #{jobId} AND buildPhase = 'FINALIZED'
        ORDER BY id DESC
        limit 1
    </select>

    <select id="getBuildNotifyByUnique" parameterType="BuildNotifyDO" resultType="BuildNotifyDO">
        SELECT * FROM oc_ci_build_notify
        WHERE jobName = #{jobName} AND buildNumber = #{buildNumber} AND buildPhase = #{buildPhase}
    </select>

    <select id="getBuildNotify" parameterType="_long" resultType="BuildNotifyDO">
        SELECT * FROM oc_ci_build_notify
        WHERE id = #{id}
    </select>

    <insert id="addBuildArtifact" parameterType="BuildArtifactDO" useGeneratedKeys="true" keyColumn="id"
            keyProperty="id">
        INSERT INTO oc_ci_build_artifact (
        buildId,
        artifactName,
        archiveUrl,
        ossPath,
        artifactSize
        ) VALUES (
        #{buildId},
        #{artifactName},
        #{archiveUrl},
        #{ossPath},
        #{artifactSize}
        );
    </insert>

    <select id="queryBuildArtifactByJobName" parameterType="object" resultType="BuildArtifactDO">
        SELECT * FROM oc_ci_build_artifact AS artifact
        WHERE buildId IN ( SELECT id FROM oc_ci_build
        <where>
            jobName = #{jobName}
            <if test="buildNumber > 0">
                AND buildNumber = #{buildNumber}
            </if>
        </where>
        )
        AND artifact.ossPath is not NULL
        ORDER BY gmtCreate DESC
        limit 20
    </select>


    <select id="queryBuildArtifactByVersionName" parameterType="object" resultType="BuildArtifactDO">
        SELECT * FROM oc_ci_build_artifact AS artifact
        WHERE buildId IN ( SELECT id FROM oc_ci_build
        <where>
            jobName = #{jobName}
            <if test="versionName != null and versionName != ''">
                AND versionName like "%" #{versionName} "%"
            </if>
        </where>
        )
        AND artifact.ossPath is not NULL
        ORDER BY gmtCreate DESC
        limit 15
    </select>

    <select id="checkBuildArtifactByUnique" parameterType="BuildArtifactDO" resultType="_int">
        SELECT COUNT(id) FROM oc_ci_build_artifact
        WHERE buildId = #{buildId} AND artifactName = #{artifactName} AND archiveUrl = #{archiveUrl}
        limit 1
    </select>

    <select id="queryBuildArtifactByOssPath" parameterType="object" resultType="BuildArtifactDO">
        SELECT * FROM oc_ci_build_artifact
        WHERE ossPath = #{ossPath}
    </select>


    <select id="getBuildArtifact" parameterType="_long" resultType="BuildArtifactDO">
        SELECT * FROM oc_ci_build_artifact WHERE id = #{id}
    </select>

    <select id="queryBuildArtifactByBuildId" parameterType="_long" resultType="BuildArtifactDO">
        SELECT * FROM oc_ci_build_artifact
        WHERE buildId = #{buildId}
    </select>


    <delete id="delBuildArtifact" parameterType="_long">
        DELETE FROM oc_ci_build_artifact WHERE id = #{id}
    </delete>


    <update id="updateDeploy" parameterType="CiDeployDO">
        UPDATE oc_ci_deploy
        SET ciHistoryId = #{ciHistoryId}
        <where>
            <if test="id != 0">
                id = #{id}
            </if>
            <if test="serverId != 0">
                AND serverId = #{serverId}
            </if>
        </where>
    </update>

    <select id="getDeployByServerId" parameterType="_long" resultType="CiDeployDO">
        SELECT * FROM oc_ci_deploy
        WHERE serverId = #{serverId}
    </select>


    <insert id="addDeploy" parameterType="CiDeployDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_ci_deploy(
        serverId,
        ciHistoryId
        ) VALUES (
        #{serverId},
        #{ciHistoryId}
        )
    </insert>

    <insert id="addDeployHistory" parameterType="CiDeployHistoryDO" useGeneratedKeys="true" keyColumn="id"
            keyProperty="id">
        INSERT INTO oc_ci_deploy_history(
        buildId,
        serverId,
        groupName,
        username,
        displayName,
        branch,
        tag,
        projectName,
        versionName,
        versionDesc,
        buildNumber,
        zabbixStatus,
        rollback,
        serialNumber,
        serverName,
        insideIp
        ) VALUES (
        #{buildId},
        #{serverId},
        #{groupName},
        #{username},
        #{displayName},
        #{branch},
        #{tag},
        #{projectName},
        #{versionName},
        #{versionDesc},
        #{buildNumber},
        #{zabbixStatus},
        #{rollback},
        #{serialNumber},
        #{serverName},
        #{insideIp}
        )
    </insert>

    <update id="updateDeployHistory" parameterType="CiDeployHistoryDO">
        UPDATE oc_ci_deploy_history
        SET buildStatus = #{buildStatus},
            buildPhase = #{buildPhase},
            buildNumber = #{buildNumber},
            zabbixStatus = #{zabbixStatus},
            versionName = #{versionName},
            versionDesc = #{versionDesc}
        WHERE id = #{id}
    </update>

    <select id="getDeployHistoryByUnique" parameterType="object" resultType="CiDeployHistoryDO">
        SELECT * FROM oc_ci_deploy_history
        WHERE serverId = #{serverId} AND buildId = #{buildId}
    </select>

    <select id="getDeployHistory" parameterType="_long" resultType="CiDeployHistoryDO">
        SELECT * FROM oc_ci_deploy_history
        WHERE id = #{id}
    </select>

    <select id="queryDeployHistoryByServerId" parameterType="_long" resultType="CiDeployHistoryDO">
        SELECT * FROM oc_ci_deploy_history
        WHERE serverId = #{serverId}
    </select>

    <select id="queryDeployHistoryByBuildId" parameterType="_long" resultType="CiDeployHistoryDO">
        SELECT * FROM oc_ci_deploy_history
        WHERE buildId = #{buildId}
    </select>

    <insert id="addCiBuildCommit" parameterType="CiBuildCommitDO" useGeneratedKeys="true" keyColumn="id"
            keyProperty="id">
        INSERT INTO oc_ci_build_commit(
        buildId,
        commit,
        message
        ) VALUES (
        #{buildId},
        #{commit},
        #{message}
        )
    </insert>

    <select id="queryCiBuildCommitByBuildId" parameterType="object" resultType="CiBuildCommitDO">
        SELECT * FROM oc_ci_build_commit
        WHERE buildId = #{buildId}
    </select>

    <delete id="delCiBuildCommit" parameterType="_long">
        DELETE FROM oc_ci_build_commit WHERE id = #{id}
    </delete>

    <select id="getMyAppSize" parameterType="object" resultType="_int">
        SELECT count(id) FROM oc_ci_app
        WHERE id IN ( SELECT appId FROM oc_ci_app_auth WHERE username = #{username} )
    </select>

    <insert id="addLabel" parameterType="LabelDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_ci_label(
        labelName,
        content,
        labelType
        ) VALUES (
        #{labelName},
        #{content},
        #{labelType}
        )
    </insert>

    <delete id="delLabel" parameterType="_long">
        DELETE FROM oc_ci_label WHERE id = #{id}
    </delete>

    <update id="updateLabel" parameterType="LabelDO">
        UPDATE oc_ci_label
        SET
        labelName = #{labelName},
        content = #{content}
        WHERE id = #{id}
    </update>

    <select id="queryLabel" resultType="LabelDO">
        SELECT * FROM oc_ci_label
    </select>

    <select id="queryAppByLabel" parameterType="object" resultType="CiAppDO">
        SELECT * FROM oc_ci_app
        <where>
            id NOT IN ( SELECT appId FROM oc_ci_label_member WHERE labelId = #{labelId} )
            <if test="queryName != null and queryName != ''">
                AND ( appName like "%" #{queryName} "%" OR projectName like "%" #{queryName} "%" )
            </if>
        </where>
        ORDER BY appName
    </select>

    <insert id="addMember" parameterType="LabelMemberDO" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO oc_ci_label_member (
        labelId,
        appId
        ) VALUES (
        #{labelId},
        #{appId}
        )
    </insert>

    <delete id="delMember" parameterType="_long">
        DELETE FROM oc_ci_label_member WHERE id = #{id}
    </delete>

    <select id="getMemberByLabel" parameterType="_long" resultType="LabelMemberVO">
        SELECT member.*, app.appName FROM oc_ci_label_member AS member
        LEFT JOIN oc_ci_app AS app ON member.appId = app.id
        WHERE labelId = #{labelId};
    </select>

</mapper>